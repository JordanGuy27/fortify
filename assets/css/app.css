/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/*
* Hide only visually, but have it available for screen readers: h5bp.com/v
*/
.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/*
* Extends the .visuallyhidden class to allow the element to be focusable
* when navigated to via the keyboard: h5bp.com/p
*/
.visuallyhidden.focusable:active,
.visuallyhidden.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
}

html, body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
  font-size: 100%;
  width: 100%;
  margin: 0px;
  padding: 0px;
  overflow-x: hidden;
}

body {
  background-color: #fff;
  color: #505050;
  margin: 0;
  padding: 0;
  position: relative;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}

img, svg {
  max-width: 100%;
}

.wrapper {
  max-width: 90%;
  margin: 0 auto;
}

body {
  width: 100%;
  height: 100%;
}

.slideout-menu {
  position: fixed;
  top: 0;
  bottom: 0;
  width: 256px;
  min-height: 100vh;
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch;
  z-index: 0;
  display: none;
}

.slideout-menu-left {
  left: 0;
}

.slideout-menu-right {
  right: 0;
}

.slideout-panel {
  position: relative;
  z-index: 1;
  will-change: transform;
  background-color: #FFF;
  /* A background-color is required */
  min-height: 100vh;
}

.slideout-open,
.slideout-open body,
.slideout-open .slideout-panel {
  overflow: hidden;
}

.slideout-open .slideout-menu {
  display: block;
}

header {
  height: 100vh;
  background-image: url("../../../assets/images/fortify.png");
  background-repeat: no-repeat;
  background-position: center;
  position: relative;
}

header .navWrapper {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: center;
      align-items: center;
  padding: 20px 0;
  -ms-flex-pack: justify;
      justify-content: space-between;
}

.hamburgerContainer {
  display: -ms-flexbox;
  display: flex;
  height: 70px;
  -ms-flex-pack: justify;
      justify-content: space-between;
  -ms-flex-align: center;
      align-items: center;
}

.sidebar {
  position: fixed;
  top: 90px;
  right: -30%;
  background-color: #fff;
  width: 30%;
  height: 100%;
  transition: all 0.6s ease;
}

.active {
  right: 0;
}

.navUl {
  margin: 0;
  padding: 20px 0;
  -ms-flex-pack: justify;
      justify-content: space-between;
  width: 100%;
  height: 100%;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: column;
      flex-direction: column;
}

.navUl li {
  list-style: none;
  width: 90%;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: end;
      justify-content: flex-end;
}

.navUl li i {
  font-size: 25px;
}

.navUl li a {
  text-decoration: none;
  margin-top: 20px;
  margin-left: 40px;
  padding-bottom: 20px 0;
  font-size: 18px;
  font-weight: 500;
  color: #000;
  display: block;
  width: 100%;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: justify;
      justify-content: space-between;
  -ms-flex-align: center;
      align-items: center;
  border-bottom: 2px solid transparent;
  padding-bottom: 20px;
  transition: 0.2s all ease;
}

.fortifyImageHeader {
  width: 10%;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: center;
      align-items: center;
}

.fortifyImageHeader img {
  max-width: 50%;
}

nav {
  width: 100%;
  height: 60%;
  display: -ms-flexbox;
  display: flex;
  padding-top: 10px;
  -ms-flex-pack: justify;
      justify-content: space-between;
}

.backgroundActive {
  background: rgba(0, 0, 0, 0.9);
  display: none;
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
  transition: 5s all ease;
  z-index: 5;
}

.mainNav {
  background-color: #fff;
  position: fixed;
  width: 100%;
  padding: 10px 0;
  z-index: 10;
  top: 0;
}

.scrollDown {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
      justify-content: center;
  -ms-flex-align: center;
      align-items: center;
  -ms-flex-direction: column;
      flex-direction: column;
  text-decoration: none;
  color: #000;
  position: absolute;
  margin-left: auto;
  margin-right: auto;
  left: 0;
  z-index: 1;
  right: 0;
  bottom: 0;
  margin-bottom: 20px;
  transition: 0.2s all ease;
}

.scrollDown:hover {
  color: rgba(0, 0, 0, 0.7);
}

.scrollDown i {
  margin-top: 5px;
}

@media (max-width: 1100px) {
  header {
    background-image: url("../../../assets/images/fortify2.png");
  }
}

@media (max-width: 777px) {
  header {
    background-size: contain;
  }
  .sidebar {
    position: fixed;
    right: -40%;
    width: 40%;
  }
  .active {
    right: 0;
  }
  .fortifyImageHeader {
    display: none;
  }
  .hamburgerContainer {
    -ms-flex-pack: end;
        justify-content: flex-end;
  }
}

@media (max-width: 600px) {
  .sidebar {
    position: fixed;
    right: -60%;
    width: 60%;
  }
  .active {
    right: 0;
  }
  .navUl li a {
    font-size: 14px;
  }
}

@media (max-width: 400px) {
  .navUl li i {
    font-size: 16px;
  }
}

@media (max-width: 320px) {
  .navUl li a {
    margin-top: 10px;
  }
}

.philosophy {
  width: 100%;
  min-height: calc(100vh - 90px);
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: center;
      align-items: center;
  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url("../../../assets/images/frontLunge2.jpg");
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
}

.philosophy h2 {
  font-size: 50px;
  text-align: center;
  margin-top: 10px;
  margin-bottom: 30px;
  color: #fff;
  font-weight: 700;
  font-family: 'Montserrat', sans-serif;
}

.philosophy p {
  font-size: 18px;
  line-height: 1.7;
  color: #fff;
  text-align: center;
  margin-bottom: 10px;
}

.philosophy .philosophyContent {
  height: 100%;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
      justify-content: center;
  -ms-flex-direction: column;
      flex-direction: column;
}

.philosophy .backgroundGradient {
  background-color: rgba(0, 0, 0, 0.7);
  padding: 30px;
  border-radius: 5px;
  margin: 20px 0;
}

@media (max-width: 600px) {
  .philosophy p {
    font-size: 14px;
  }
  .philosophy h2 {
    font-size: 30px;
  }
}

.training {
  width: 100%;
  min-height: calc(100vh - 90px);
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: center;
      align-items: center;
  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.7)), url("../../../assets/images/brickwall.jpg");
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
}

.training h2 {
  font-size: 50px;
  text-align: center;
  margin-top: 10px;
  margin-bottom: 30px;
  color: #fff;
  font-weight: 700;
  font-family: 'Montserrat', sans-serif;
}

.training p {
  font-size: 18px;
  line-height: 1.7;
  color: #fff;
  margin-bottom: 20px;
  text-align: center;
}

.training .trainingContent {
  height: 100%;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
      justify-content: center;
  -ms-flex-direction: column;
      flex-direction: column;
}

.training .backgroundGradient {
  background-color: rgba(0, 0, 0, 0.7);
  padding: 30px;
  border-radius: 5px;
  margin: 20px 0;
}

@media (max-width: 600px) {
  .training p {
    font-size: 14px;
  }
  .training h2 {
    font-size: 30px;
  }
}

.bio {
  width: 100%;
  background-color: #fff;
  padding-bottom: 50px;
}

.bio .bioFlex {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: justify;
      justify-content: space-between;
  -ms-flex-align: center;
      align-items: center;
}

.bio .headshot {
  width: 30%;
}

.bio .headshot img {
  border-radius: 50%;
}

.bio .bioContent {
  width: 60%;
  padding: 40px;
  border-radius: 5px;
  color: #000;
}

.bio .bioContent p:first-child {
  margin-bottom: 20px;
}

.bio h2 {
  font-size: 50px;
  padding: 50px 0;
  font-weight: 700;
  text-align: center;
  color: #000;
  font-family: 'Montserrat', sans-serif;
}

.bio p {
  font-size: 18px;
  line-height: 1.7;
}

@media (max-width: 1100px) {
  .bio .headshot {
    width: 40%;
  }
}

@media (max-width: 1000px) {
  .bio {
    padding-bottom: 10px;
  }
  .bio .bioFlex {
    -ms-flex-direction: column;
        flex-direction: column;
  }
  .bio .bioFlex .bioContent {
    width: 100%;
    text-align: center;
  }
}

@media (max-width: 600px) {
  .bio p {
    font-size: 14px;
  }
  .bio h2 {
    font-size: 30px;
  }
}

.services {
  width: 100%;
  min-height: calc(100vh - 90px);
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: center;
      align-items: center;
  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url("../../../assets/images/sledPush2.jpg");
  background-repeat: no-repeat;
  background-position: top;
  background-size: cover;
}

.services h2 {
  font-size: 50px;
  text-align: center;
  margin-top: 10px;
  margin-bottom: 30px;
  color: #fff;
  font-weight: 700;
  font-family: 'Montserrat', sans-serif;
}

.services p {
  font-size: 18px;
  line-height: 1.7;
  color: #fff;
  margin-bottom: 20px;
  text-align: center;
}

.services .servicesContent {
  height: 100%;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
      justify-content: center;
  -ms-flex-direction: column;
      flex-direction: column;
}

.services .backgroundGradient {
  background-color: rgba(0, 0, 0, 0.7);
  padding: 30px;
  border-radius: 5px;
  margin: 20px 0;
}

@media (max-width: 600px) {
  .services p {
    font-size: 14px;
  }
  .services h2 {
    font-size: 30px;
  }
}

.contact .contactFlex {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: justify;
      justify-content: space-between;
  padding: 30px 0;
}

.contact .contactFlex .getInTouch {
  width: 50%;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: column;
      flex-direction: column;
}

.contact .contactFlex .getInTouch h2 {
  font-size: 30px;
  margin: 20px 0;
  font-family: 'Montserrat', sans-serif;
  font-weight: 700;
  color: #000;
}

.contact .contactFlex .getInTouch p {
  margin-bottom: 20px;
  color: #000;
}

.contact .contactFlex .getInTouch .contactContent form {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: column;
      flex-direction: column;
}

.contact .contactFlex .getInTouch .contactContent input[type="text"] {
  width: 70%;
  margin-bottom: 20px;
  padding: 10px;
  font-size: 14px;
}

.contact .contactFlex .getInTouch .contactContent input[type="submit"] {
  width: 35%;
  padding: 15px 10px;
  background-color: #000;
  color: #fff;
  font-size: 14px;
  font-weight: 500;
  margin-bottom: 20px;
  border-radius: 5px;
}

.contact .contactFlex .getInTouch .inputContainer {
  width: 100%;
}

.contact .contactFlex .connectWithUs h4 {
  font-size: 25px;
  margin: 20px 0;
  font-weight: 700;
  color: #000;
  width: 100%;
  font-family: 'Montserrat', sans-serif;
}

.contact .contactFlex .connectWithUs p {
  color: #000;
}

.contact .contactFlex .social {
  margin-top: 10px;
}

.contact .contactFlex .social h4 {
  font-size: 25px;
  margin-top: 20px;
  font-weight: 700;
  color: #000;
  width: 100%;
  font-family: 'Montserrat', sans-serif;
}

.contact .contactFlex .social .icons a {
  text-decoration: none;
  color: #000;
  font-size: 18px;
  margin-right: 10px;
}

.contact .contactFlex .social .icons a:hover {
  color: rgba(0, 0, 0, 0.7);
}

.contact .contactFlex .social .icons i {
  margin-right: 5px;
}

.contact .contactFlex .contactInfo .connectWithUs {
  width: 100%;
}

.contact .contactFlex .contactInfo .connectWithUs p {
  line-height: 1.7;
}

.contact .contactFlex .contactInfo .connectWithUs a {
  text-decoration: none;
  color: #000;
  margin-top: 5px;
  display: inline-block;
  border-bottom: 1px solid #000;
}

.contact .contactFlex .contactInfo .connectWithUs a:hover {
  color: rgba(0, 0, 0, 0.7);
  border-bottom: 1px solid rgba(0, 0, 0, 0.7);
}

.contact .contactFlex .contactInfo {
  width: 40%;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: column;
      flex-direction: column;
}

@media (max-width: 1000px) {
  .inputContainer {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-pack: center;
        justify-content: center;
    -ms-flex-direction: column;
        flex-direction: column;
    -ms-flex-align: center;
        align-items: center;
  }
  .contact .contactFlex {
    -ms-flex-direction: column-reverse;
        flex-direction: column-reverse;
    -ms-flex-align: center;
        align-items: center;
  }
  .contact .contactFlex .getInTouch {
    width: 100%;
    display: -ms-flexbox;
    display: flex;
    text-align: center;
    -ms-flex-pack: center;
        justify-content: center;
    margin-top: 20px;
  }
  .contact .contactFlex .getInTouch h2 {
    font-size: 25px;
  }
  .contact .contactFlex .getInTouch .contactContent input[type="text"] {
    width: 80%;
    padding: 10px 5px;
  }
  .contact .contactFlex .getInTouch .contactContent input[type="submit"] {
    margin: 0 auto;
    display: block;
  }
  .contact .contactFlex .contactInfo {
    width: 100%;
    text-align: center;
  }
  .contact .contactFlex .contactInfo .social {
    width: 100%;
    margin-top: 20px;
  }
  .contact .contactFlex .contactInfo .social .icons {
    -ms-flex-pack: center;
        justify-content: center;
  }
  .contact .contactFlex .contactInfo .social .icons a {
    display: inline-block;
    margin-top: 20px;
  }
  .contact .contactFlex .contactInfo .social .connectWithUs {
    width: 100%;
  }
}

@media (max-width: 340px) {
  .contact .contactFlex .contactInfo .connectWithUs a {
    font-size: 14px;
  }
}

footer {
  width: 100%;
  border-top: 1px solid #000;
  color: #000;
}

footer .footerContent {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: justify;
      justify-content: space-between;
  -ms-flex-align: center;
      align-items: center;
  -ms-flex-direction: column;
      flex-direction: column;
  padding: 20px 0;
}

.footerImage {
  width: 10%;
  margin-bottom: 20px;
}

.footerImage img {
  max-width: 50%;
  display: block;
  margin: 0 auto;
}

@media (max-width: 900px) {
  footer .footerImage {
    width: 30%;
  }
  footer p {
    font-size: 14px;
    text-align: center;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
